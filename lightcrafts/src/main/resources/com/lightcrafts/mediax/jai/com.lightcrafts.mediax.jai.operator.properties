#
# $RCSfile: com.lightcrafts.mediax.jai.operator.properties,v $
#
# Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.
#
# Use is subject to license terms.
#
# $Revision: 1.1 $
# $Date: 2005/02/11 04:57:47 $
# $State: Exp $
#
DescriptorVersion=1.1
DescriptorVersion2=1.2

AWTImageDescriptor0=Converts a java.awt.Image into a rendered image.
AWTImageDescriptor1=The AWT image to be converted.
AbsoluteDescriptor0=Replaces the pixel values of an image by their absolute values.
AddCollectionDescriptor0=Adds a collection of images.
AddCollectionDescriptor1= operation requires the source collection to have at least 2 elements.
AddCollectionDescriptor2= operation requires all elements in the source collection to be of class java.awt.image.RenderedImage.
AddCollectionDescriptor3= operation requires all elements in the source collection to be of class java.awt.image.renderable.RenderableImage.
AddConstDescriptor0=Adds constants to an image.
AddConstDescriptor1=The constants to be added.
AddConstDescriptor2= operation requires its parameter to have at least 1 array element.
AddConstToCollectionDescriptor0=Adds constants to a collection of rendered images.
AddConstToCollectionDescriptor1=The constants to be added.
AddConstToCollectionDescriptor2=operation requires the source collection to have at least 1 element.
AddConstToCollectionDescriptor3=operation requires all elements in the source collection to be of class java.awt.image.RenderedImage.
AddConstToCollectionDescriptor4=operation requires its parameter to have at least 1 array element.
AddDescriptor0=Adds two images.
AffineDescriptor0=Performs interpolated affine transform on an image.
AffineDescriptor1=The affine transform matrix.
AffineDescriptor2=The interpolation method.
AffineDescriptor3=The user-specified background values.
AffineDescriptor4= operation can not invert the supplied transform parameter.
AndConstDescriptor0=Logically \"ands\" an image with constants.
AndConstDescriptor1=The constants to logically \"and\" with.
AndConstDescriptor2= operation requires its source to have an integral data type.
AndConstDescriptor3= operation requires its parameter to have at least 1 array element.
AndDescriptor0=Logically \"ands\" two images.
AndDescriptor1= operation requires 2 sources.
AndDescriptor2= operation requires both sources to be a valid input; null is supplied.
BinarizeDescriptor0 = Binarize an image from a threshold value.
BinarizeDescriptor1 = Argment must be of type java.lang.Double.
BinarizeDescriptor2 = source image must be single-banded.
BMPDescriptor0=Reads an image from a BMP stream.
BMPDescriptor1=The SeekableStream to read from.
BandCombineDescriptor0=Performs arbitrary interband linear combination using a specified matrix.
BandCombineDescriptor1=The matrix specifying the band combination.
BandCombineDescriptor2=a row of the matrix does not have the correct number of entries, should be OpImage.getExpandedNumBands(source0.getSampleModel(), source0.getColorModel()) + 1.
BandMergeDescriptor0=Merge (possibly multi-banded)images into a multibanded image.
BandMergeDescriptor1=later.
BandMergeDescriptor2=later.
BandSelectDescriptor0=Selects n number of bands from an image.
BandSelectDescriptor1=The indices of the selected bands.
BandSelectDescriptor2= operation requires the band indices to have at least 1 array element.
BandSelectDescriptor3= operation requires band indices to be less than the number of bands of the source image.

BorderDescriptor0=Adds a border around an image.
BorderDescriptor1=The image's left padding.
BorderDescriptor2=The image's right padding.
BorderDescriptor3=The image's top padding.
BorderDescriptor4=The image's bottom padding.
BorderDescriptor5=The border type.
BorderDescriptor6=The mode name and ParameterBlocks may not be null.
BorderDescriptor7=Insufficient number of sources in old or new ParameterBlock.
BorderDescriptor8=Insufficient number of parameters in old or new ParameterBlock.

BoxFilterDescriptor0=Performs special case convolution where each source pixel contributes equally to the intensity of the destination pixel.
BoxFilterDescriptor1=The width of the box.
BoxFilterDescriptor2=The height of the box.
BoxFilterDescriptor3=The X position of the key element.
BoxFilterDescriptor4=The Y position of the key element.

ClampDescriptor0=Clamps the pixel values of an image to a specified range.
ClampDescriptor1=The lower boundary for each band.
ClampDescriptor2=The upper boundary for each band.
ClampDescriptor3= operation requires each parameter to have at least 1 array element.
ClampDescriptor4= operation requires each lower boundary to be less than or equal to its corresponding upper boundary.
ColorConvertDescriptor0=Convert the color space of an image.
ColorConvertDescriptor1=The destination color space.
ColorConvertDescriptor2=The source image ColorModel may not be null.

ColorQuantizerDescriptor0=Generates optimal lookup table and result image of nearest distance classification
ColorQuantizerDescriptor1=The quantization algorithm to be used.
ColorQuantizerDescriptor2=The expected maximum color number.
ColorQuantizerDescriptor3=The histogram size for median-cut; The train cycle for NeuQuant; The maximum tree size for Oct-Tree.
ColorQuantizerDescriptor4=The ROI in which the pixels are involved into the color quantization.
ColorQuantizerDescriptor5=The subsampling rate in x-direction. 
ColorQuantizerDescriptor6=The subsampling rate in y-direction.
ColorQuantizerDescriptor7=Invalid color quantization algorithm.

CompositeDescriptor0=Composites two images based on an alpha mask.
CompositeDescriptor1=The alpha image for the first source.
CompositeDescriptor2=The alpha image for the second source.
CompositeDescriptor3=True if alpha has been premultiplied to both sources and the destination.
CompositeDescriptor4=Indicates if the destination image should include an extra alpha channel, and if so, should it be the first or last band.

CompositeDescriptor8=operation requires the 2 sources to match in number of bands and data type.
CompositeDescriptor9=operation requires 4 parameters.
CompositeDescriptor10=operation requires source1Alpha parameter to be a valid input.
CompositeDescriptor11=operation requires source1Alpha parameter to be of class com.lightcrafts.mediax.jai.PlanarImage.
CompositeDescriptor12=operation requires its first source and alpha image to match in dimensions.
CompositeDescriptor13=operation requires its first source and alpha image to match in data type.
CompositeDescriptor14=operation requires source2Alpha parameter to be of class com.lightcrafts.mediax.jai.PlanarImage.
CompositeDescriptor15=operation requires its second source and alpha image to match in dimensions.
CompositeDescriptor16=operation requires its second source and alpha image to match in data type.
CompositeDescriptor17=operation requires alphaPremultiplied parameter to be of class java.lang.Boolean.
CompositeDescriptor18=operation requires alphaFirst parameter to be of class java.lang.Boolean.
ConjugateDescriptor0=Computes the complex conjugate of a complex image.
ConjugateDescriptor1=The source image must have an even number of bands.
ConstantDescriptor0=Creates an image with constant pixel values.
ConstantDescriptor1=Image width in pixels.
ConstantDescriptor2=Image height in pixels.
ConstantDescriptor3=The constant pixel band values.
ConstantDescriptor4= operation requires parameter 2 to have at least 1 array element.
ConstantDescriptor5=The width and height supplied in rendered mode must round to at least unity.
ConstantDescriptor6=The width and height supplied in renderable mode must be positive.

ConvolveDescriptor0=Performs kernel-based convolution on an image.
ConvolveDescriptor1=The convolution kernel.
CropDescriptor0=Performs cropping to a specified bounding box.
CropDescriptor1=The x origin of the cropping operation.
CropDescriptor2=The y origin of the cropping operation.
CropDescriptor3=The width of the cropping operation.
CropDescriptor4=The height of the cropping operation.
CropDescriptor5=The rectangular crop area must not be empty.
CropDescriptor6=The rectangular crop area must not be outside the image.
DCTDescriptor0=Computes the discrete cosine transform of an image.
DFTDescriptor0=Computes the discrete Fourier transform of an image.
DFTDescriptor1=The type of scaling to perform.
DFTDescriptor2=The nature of the data.
DFTDescriptor3= operation does not support supplied scaling type.
DFTDescriptor4= operation does not support supplied data nature.
DFTDescriptor5= operation requires complex sources to have an even number of bands.
DilateDescriptor0=Performs binary kernel based Dilate operation on the image.
DilateDescriptor1=The binary convolution kernel.
DivideByConstDescriptor0=Divides an image by constants.
DivideByConstDescriptor1=The constants to be divided by.
DivideByConstDescriptor2= operation requires its parameter to have at least 1 array element.
DivideComplexDescriptor0=Compute the complex quotient of two images.
DivideComplexDescriptor1= operation requires its sources to have an even number of bands.
DivideDescriptor0=Divides one image by another image.
DivideIntoConstDescriptor0=Divides an image into constants.
DivideIntoConstDescriptor1=The constants to be divided into.
DivideIntoConstDescriptor2= operation requires its parameter to have at least 1 array element.
EncodeDescriptor0=Stores an image to an OutputStream.
EncodeDescriptor1=The OutputStream to write to.
EncodeDescriptor2=The format of the created file.
EncodeDescriptor3=The encoding parameters.
EncodeDescriptor4=The specified format has no associated registered ImageCodec.
EncodeDescriptor5=No ImageEncoder is available for this format or this image cannot be encoded with the given encoding parameters.
ErodeDescriptor0=Performs binary kernel based Erode operation on the image.
ErodeDescriptor1=The binary convolution kernel.
ErrorDiffusionDescriptor0=Performs error diffusion color quantization using a specified color map and error filter.
ErrorDiffusionDescriptor1=The color map.
ErrorDiffusionDescriptor2=The error filter kernel.
ErrorDiffusionDescriptor3=Color map and source data types do not match.
ErrorDiffusionDescriptor4=Color map and source band counts do not match.
ErrorDiffusionDescriptor5=All color map bands must have the same offset.
ErrorDiffusionDescriptor6=A kernel element which is not ignored has a value outside the range [0.0,1.0].
ErrorDiffusionDescriptor7=The sum of the values of kernel elements which are not ignored is not 1.0.
ExpDescriptor0=Computes the exponential of the pixel values of an image.
ExtremaDescriptor0=Finds the maximum and minimum pixel value in each band of an image.
ExtremaDescriptor1=The region of the image to scan.
ExtremaDescriptor2=The horizontal sampling rate, may not be less than 1.
ExtremaDescriptor3=The vertical sampling rate, may not be less than 1.
ExtremaDescriptor4=Whether to store extrema locations.
ExtremaDescriptor5=Maximum number of run length codes to store.
FPXDescriptor0=Reads an image from a FlashPix stream.
FPXDescriptor1=The SeekableStream to read from.
FPXDescriptor2=The FPXDecodeParam to use.
FPXFileDescriptor0=Reads an image from a FlashPix file.
FPXFileDescriptor1=The File to read from.
FPXFileDescriptor2=The resolution number to read.
FileLoadDescriptor0=Reads an image from a file.
FileLoadDescriptor1=The path of the file to read from.
FileLoadDescriptor2=File not found.
FileLoadDescriptor3=File is not readable.
FileLoadDescriptor4=The ImageDecodeParam to use.
FileLoadDescriptor5=Boolean specifying if File existence should be checked locally

FileStoreDescriptor0=Stores an image to a file.
FileStoreDescriptor1=The path of the file to write to.
FileStoreDescriptor2=The format of the file.
FileStoreDescriptor3=The encoding parameters.
FileStoreDescriptor4=The specified format has no associated registered ImageCodec.
FileStoreDescriptor5=No ImageEncoder is available for this format or this image cannot be encoded with the given encoding parameters.
FileStoreDescriptor6=The file name parameter is null.
FileStoreDescriptor7=The specified file already exists with permissions that disallow overwriting.
FileStoreDescriptor8=Cannot create image file.
FileStoreDescriptor9=IOException encountered in file creation test:
FileStoreDescriptor10=SecurityException encountered in file creation test:
FileStoreDescriptor11=Boolean specifying whether check for file creation / writing locally should be done.

FilteredSubsampleDescriptor0=Filters and subsamples an image.
FilteredSubsampleDescriptor1=Subsample scale factors must be positive.
FilteredSubsampleDescriptor2=Interpolation must be one of Nearest, Bilinear, Bicubic, or Bicubic2.
FormatDescriptor0=Reformats an image.
FormatDescriptor1= operation does not support supplied data type.

Generic0=The input argument(s) may not be null.

GIFDescriptor0=Reads an image from a GIF stream.
GIFDescriptor1=The SeekableStream to read from.
GradientMagnitudeDescriptor0=Computes the gradient of an image
GradientMagnitudeDescriptor1=kernels not of same dimensions
GradientMagnitudeDescriptor2=operation requires 2 parameters

HistogramDescriptor0=Generates a histogram based on the pixel values within a specific region of an image.
HistogramDescriptor1=The region of the image to be scanned.
HistogramDescriptor2=The horizontal sampling rate; may not be less than 1.
HistogramDescriptor3=The vertical sampling rate; may not be less than 1.
HistogramDescriptor4=The number of bins for each band.
HistogramDescriptor5=The lowest inclusive pixel value to be checked for each band.
HistogramDescriptor6=The highest exclusive pixel value to be checked for each band.
HistogramDescriptor7=The numBins must be greater than 0.
HistogramDescriptor8=The lowValue must be less than its corresponding highValue.

IDCTDescriptor0=Computes the inverse discrete cosine transform of an image.
IDFTDescriptor0=Computes the inverse discrete Fourier transform of an image.
IDFTDescriptor1=The type of scaling to perform.
IDFTDescriptor2=The nature of the data.
IDFTDescriptor3= operation does not support supplied scaling type.
IDFTDescriptor4= operation does not support supplied data nature.
IDFTDescriptor5= operation requires complex sources to have an even number of bands.
IIPDescriptor0=Provides client support of the Internet Imaging Protocol in the rendered and renderable mode.
IIPDescriptor1=The URL of the IIP image.
IIPDescriptor2=The sub-images to be used by the server for images at each resolution level.
IIPDescriptor3=The filtering value.
IIPDescriptor4=The color twist matrix.
IIPDescriptor5=The contrast value.
IIPDescriptor6=The source rectangle of interest in rendering-independent coordinates.
IIPDescriptor7=The rendering-independent spatial orientation transform.
IIPDescriptor8=The aspect ratio of the destination image.
IIPDescriptor9=The destination rectangle of interest in rendering-independent coordinates.
IIPDescriptor10=The counterclockwise rotation angle to be applied to the destination.
IIPDescriptor11=The mirror axis.
IIPDescriptor12=The ICC profile used to represent the color space of the source image.
IIPDescriptor13=The JPEG quality factor.
IIPDescriptor14=The JPEG compression group index number.
IIPDescriptor15=requires the URL string to specify a valid protocol.
IIPDescriptor16=requires the colorTwist array to have at least 16 elements.
IIPDescriptor17=requires both the width and height of the rectangle that marks the region of interest to be greater than 0.
IIPDescriptor18=requires the rotation angle for the destination image to be one of 0, 90, 180, or 270 degrees.
IIPDescriptor19=requires the mirror axis to be either X or Y.
IIPDescriptor20=requires the contrast value to be greater than or equal to 1.0F.
IIPDescriptor21=requires the aspect ratio to be positive.
IIPDescriptor22=requires the JPEG quality factor to be in the range [0,100].
IIPDescriptor23=requires the JPEG table index to be in the range [1,255].
IIPDescriptor24=requires the transform parameter to be invertible.
IIPResolutionDescriptor0=Provides client support of the Internet Imaging Protocol in the rendered mode.
IIPResolutionDescriptor1=The URL of the IIP image.
IIPResolutionDescriptor2=The resolution level to request.
IIPResolutionDescriptor3=The sub-image to be used by the server.
ImageFunctionDescriptor0=Generates an image from a functional description.
ImageFunctionDescriptor1=The functional description.
ImageFunctionDescriptor2=The image width.
ImageFunctionDescriptor3=The image height.
ImageFunctionDescriptor4=The X scale factor.
ImageFunctionDescriptor5=The Y scale factor.
ImageFunctionDescriptor6=The X translation.
ImageFunctionDescriptor7=The Y translation.
InvertDescriptor0=Inverts the pixel values of an image.
JPEGDescriptor0=Reads a standard JFIF (JPEG) stream.
JPEGDescriptor1=The SeekableStream to read from.
LogDescriptor0=Computes the natural logarithm of the pixel values of an image.
LookupDescriptor0=Performs general table lookup on an image.
LookupDescriptor1=The lookup table the source image is passed through.
LookupDescriptor2= operation requires its source to have an integral data type.
MagnitudeDescriptor0=Find the magnitude of each pixel of an image.
MagnitudeDescriptor1= operation requires its source to have an even number of bands.
MagnitudeSquaredDescriptor0=Computes the squared magnitude of each pixel of a complex image.
MagnitudeSquaredDescriptor1= operation requires its source to have an even number of bands.
MatchCDFDescriptor0=Matches pixel values to a supplied CDF.
MatchCDFDescriptor1=The source histogram property is undefined.
MatchCDFDescriptor2=The source histogram property returns an object which is not a Histogram.
MatchCDFDescriptor3=The length of the CDF array must equal the number of bands in the source Histogram.
MatchCDFDescriptor4=The length of each component array of the CDF must equal the number of bins in the corresponding band of the source Histogram.
MatchCDFDescriptor5=All CDF values must be non-negative.
MatchCDFDescriptor6=The CDF array must represent a non-decreasing sequence.
MatchCDFDescriptor7=The ultimate CDF array value in each band must be 1.
MaxDescriptor0=Computes the pixel-wise maximum of two images.
MaxFilterDescriptor0=Performs max filtering on an image.
MaxFilterDescriptor1=The shape of the mask to be used for Max Filtering.
MaxFilterDescriptor2=The size (width/height) of the mask to be used in Max Filtering.
MeanDescriptor0=Calculates the image-wise mean pixel value for each band of an image.
MeanDescriptor1=The region of the image to scan.
MeanDescriptor2=The horizontal sampling rate, may not be less than 1.
MeanDescriptor3=The vertical sampling rate, may not be less than 1.
MeanDescriptor4=operation requires at least 3 parameters.
MeanDescriptor5=operation requires the first parameter to be of com.lightcrafts.mediax.jai.ROI class.
MeanDescriptor6=operation requires the second and third parameter to be of java.lang.Integer class.
MeanDescriptor7=operation requires xPeriod and yPeriod parameters to be greater than or equal to 1.
MedianFilterDescriptor0=Performs median filtering on an image.
MedianFilterDescriptor1=The mask shape to be used for Median Filtering.
MedianFilterDescriptor2=The mask size to be used for Median Filtering.
MedianFilterDescriptor3= operation does not support supplied mask shape.
MedianFilterDescriptor4= operation requires its mask size to be greater than 0.
MinDescriptor0=Computes the pixel-wise minimum of two images.
MinFilterDescriptor0=Performs min filtering on an image.
MinFilterDescriptor1=The shape of the mask to be used for Min Filtering.
MinFilterDescriptor2=The size (width/height) of the mask to be used in Min Filtering.
MosaicDescriptor0=Creates a mosaic of two or more rendered images.
MosaicDescriptor1=Mosaicking type.
MosaicDescriptor2=Source alpha masks.
MosaicDescriptor3=Source region of interest masks.
MosaicDescriptor4=Source threshold values.
MosaicDescriptor5=Destination background value.
MultiplyComplexDescriptor0=Computes the complex product of two images.
MultiplyComplexDescriptor1= operation requires its sources to have an even number of bands.
MultiplyConstDescriptor0=Multiplies an image by constants.
MultiplyConstDescriptor1=The constants to be multiplied.
MultiplyConstDescriptor2= operation requires its parameter to have at least 1 array element.
MultiplyDescriptor0=Multiplies two images.
NotDescriptor0=Logically \"nots\" an image.
NotDescriptor1= operation requires its source to have an integral data type.
NullDescriptor0=An operation which does no processing.
NullDescriptor1=The mode name and ParameterBlocks may not be null.
NullDescriptor2=The old and new ParameterBlocks must each contain at least one source.
OrConstDescriptor0=Logically \"ors\" an image with constants.
OrConstDescriptor1=The constants to logically \"or\" with.
OrConstDescriptor2= operation requires its source to have an integral data type.
OrConstDescriptor3= operation requires its parameter to have at least 1 array element.
OrDescriptor0=Logically \"ors\" two images.
OrDescriptor1= operation requires 2 sources.
OrderedDitherDescriptor0=Performs ordered dither color quantization using a specified color cube and dither mask.
OrderedDitherDescriptor1=The color cube.
OrderedDitherDescriptor2=The dither mask.
OrderedDitherDescriptor3=The data type of the color cube does not match that of the source image.
OrderedDitherDescriptor4=The number of bands of the color cube does not match that of the source image.
OrderedDitherDescriptor5=The dither mask array length does not match the number of bands in the source image.
OrderedDitherDescriptor6=Not all dither mask array elements have the same width and height.
OrderedDitherDescriptor7=A dither mask matrix value is outside the allowable range [0.0, 1.0].
OverlayDescriptor0=Overlays one image on top of another.
OverlayDescriptor1=operation requires the two sources to match in number of bands and data type.
PNGDescriptor0=Reads a standard JFIF (PNG) file.
PNGDescriptor1=The SeekableStream to read from.
PNGDescriptor2=The PNGDecodeParam to use.
PNMDescriptor0=Reads a standard PNM file.
PNMDescriptor1=A SeekableStream representing the PNM file.

PatternDescriptor0=Defines an image with a repeated pattern.
PatternDescriptor1=The width of the image in pixels.
PatternDescriptor2=The height of the image in pixels.

PeriodicShiftDescriptor0=Computes the periodic translation of an image.
PeriodicShiftDescriptor1=The displacement in the X direction.
PeriodicShiftDescriptor2=The displacement in the Y direction.
PeriodicShiftDescriptor3=Shift values must be non-negative and less than the corresponding image dimension.
PhaseDescriptor0=Computes the phase angle of each pixel of an image.
PhaseDescriptor1= operation requires its source to have an even number of bands.
PiecewiseDescriptor0=Applies a piecewise pixel value mapping.
PiecewiseDescriptor1=The breakpoint array must represent 1 band or the number of bands in the source image.
PiecewiseDescriptor2=The second dimension of the breakpoint array must be of length 2.
PiecewiseDescriptor3=The number of breakpoint abscissas must equal the number of breakpoint ordinates in each band.
PiecewiseDescriptor4=The breakpoint abscissas must be monotonically increasing.
PolarToComplexDescriptor0=Computes a complex image from a magnitude and a phase image.
PolarToComplexDescriptor1=operation requires its sources to have an equal number of bands.
RenderableDescriptor0=Produces a RenderableImage from a RenderedImage.
RenderableDescriptor1=The operation chain used to derive the lower resolution images.
RenderableDescriptor2=The maximum dimension of the lowest resolution pyramid level.
RenderableDescriptor3=The minimum rendering-independent X coordinate of the destination.
RenderableDescriptor4=The minimum rendering-independent Y coordinate of the destination.
RenderableDescriptor5=The rendering-independent height.
RenderableDescriptor6=The maximum dimension of the lowest level must be positive.
RenderableDescriptor7=The rendering-independent height must be positive.
RescaleDescriptor0=Maps the pixels values of an image from one range to another range.
RescaleDescriptor1=The per-band constants to multiply by.
RescaleDescriptor2=The per-band offsets to be added.
RescaleDescriptor3=constants.length must be at least 1.
RescaleDescriptor4=offsets.length must be at least 1.
RGBToIHSDescriptor0=Convert an image from RGB to IHS color space.
RotateDescriptor0=Rotates an image.
RotateDescriptor1=The X origin to rotate about.
RotateDescriptor2=The Y origin to rotate about.
RotateDescriptor3=The rotation angle in radians.
RotateDescriptor4=The interpolation method.
RotateDescriptor5=The user-specified background values.
ScaleDescriptor0=Resizes an image.
ScaleDescriptor1=The X scale factor.
ScaleDescriptor2=The Y scale factor.
ScaleDescriptor3=The X translation.
ScaleDescriptor4=The Y translation.
ScaleDescriptor5=The interpolation method for resampling.
ScaleDescriptor6= operation requires both scale factors be greater than 0.
ShearDescriptor0=Shears an image.
ShearDescriptor1=The shear value.
ShearDescriptor2=The shear direction.
ShearDescriptor3=The X translation.
ShearDescriptor4=The Y translation.
ShearDescriptor5=The interpolation method for resampling.
ShearDescriptor6=The user-specified background values.
SobelDescriptor0=Performs Sobel edge detection on the image.
StreamDescriptor0=Reads an image from a SeekableStream.
StreamDescriptor1=The SeekableStream to read from.
StreamDescriptor2=The ImageDecodeParam to use.
SubsampleBinaryToGray0=To subsamples binary image to gray; reverse of dithering.
SubsampleBinaryToGray1=scaleX must be between 0 and 1, excluding 0.
SubsampleBinaryToGray2=scaleY must be between 0 and 1, excluding 0.
SubsampleBinaryToGray3=src image must have MultiPixelPackedSampleModel.
SubsampleAverageDescriptor0=Subsamples an image by averaging over a moving window.
SubsampleAverageDescriptor1=The X scale factor.
SubsampleAverageDescriptor2=The Y scale factor.
SubsampleAverageDescriptor3=modeName may not be null.
SubsampleAveragePropertyGenerator0=propertyName may not be null
SubsampleAveragePropertyGenerator1=opNode may not be null
SubsampleAveragePropertyGenerator2=Neither parameter may be null.
SubsampleAveragePropertyGenerator3= is not a supported class.
SubtractConstDescriptor0=Subtracts constants from an image.
SubtractConstDescriptor1=The constants to be subtracted.
SubtractConstDescriptor2= operation requires its parameter to have at least 1 array element.
SubtractDescriptor0=Subtracts one image from another image.
SubtractFromConstDescriptor0=Subtracts an image from constants.
SubtractFromConstDescriptor1=The constants to be subtracted from.
SubtractFromConstDescriptor2= operation requires its parameter to have at least 1 array element.
TIFFDescriptor0=Reads TIFF 6.0 data from an SeekableStream.
TIFFDescriptor1=The SeekableStream to read from.
TIFFDescriptor2=The TIFFDecodeParam to use.
TIFFDescriptor3=The page to be decoded.
ThresholdDescriptor0=Maps the pixels whose value falls between a low value and a high value to a constant.
ThresholdDescriptor1=The low value.
ThresholdDescriptor2=The high value.
ThresholdDescriptor3=The constant the pixels are mapped to.
ThresholdDescriptor4=operation requires 3 input parameters.
ThresholdDescriptor5=operation requires all parameters to be valid input; a null is supplied.
ThresholdDescriptor6=operation requires all parameters to be of type double[].
ThresholdDescriptor7=operation requires all parameters to have at least 1 array element.
TransposeDescriptor0=Reflects an image in a specified direction or rotates an image in multiples of 90 degrees.
TransposeDescriptor1=The The type of flip operation to be performed.
TranslateDescriptor0=Moves an image to a new location.
TranslateDescriptor1=The displacement in X direction.
TranslateDescriptor2=The displacement in Y direction.
TranslateDescriptor3=The interpolation method.
UnsharpMaskDescriptor0=Performs UnsharpMask operation on the image.
UnsharpMaskDescriptor1=The low-pass convolution kernel.
UnsharpMaskDescriptor2=The sharpening value.
URLDescriptor0=Reads an image from a URL.
URLDescriptor1=The URL to read from.
URLDescriptor2=The ImageDecodeParam to use.
WarpDescriptor0=Warps an image according to a specified Warp object.
WarpDescriptor1=The warp object.
WarpDescriptor2=The interpolation method.
WarpDescriptor3=The user-specified background values.
XorConstDescriptor0=Logically \"xors\" an image with constants.
XorConstDescriptor1=The constants to logically \"xor\" with.
XorConstDescriptor2= Operation requires its source to have an integral data type.
XorConstDescriptor3= Operation requires its parameter to have at least 1
array element.
XorDescriptor0=Logically \"xors\" two images.
XorDescriptor1= operation requires 2 sources.
